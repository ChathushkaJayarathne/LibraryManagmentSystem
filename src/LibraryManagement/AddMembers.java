/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LibraryManagement;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author U S E R
 */

public class AddMembers extends javax.swing.JFrame {
    /**
     * Creates new form AddMembers
     */
    public AddMembers() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Contact = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Add = new javax.swing.JButton();
        Home = new javax.swing.JButton();
        NIC = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Name = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name");

        jLabel3.setText("Contact No");

        Contact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContactActionPerformed(evt);
            }
        });
        Contact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ContactKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Add Members");

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Home.setText("Home");
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });

        NIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NICActionPerformed(evt);
            }
        });
        NIC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NICKeyTyped(evt);
            }
        });

        jLabel2.setText("NIC");

        Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NameKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(297, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(458, 458, 458))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Home)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(88, 88, 88)
                                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(101, 101, 101)
                                    .addComponent(NIC, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(59, 59, 59)
                                    .addComponent(Contact, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(431, 431, 431)
                                    .addComponent(Add))))
                        .addGap(297, 297, 297))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel4)
                .addGap(166, 166, 166)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addComponent(NIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3))
                    .addComponent(Contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(Add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(Home)
                .addGap(140, 140, 140))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        //add button performence
        //getting length of entered text in contact field
        int C=Contact.getText().length();
        //getting length of entered text in NIC field
        int N=NIC.getText().length();
        //checking is there any empty or incorrect text field
        if( Name.getText().isEmpty() || C!=10 || ( (N!=10) && (N!=12) ) ){
            //showing warnning if there is any invalid data entered
            String message=" Unsuccessful \n Please fill every field of informaion correct" ;
            JFrame f=new JFrame();
            JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
        }
        else{
            JFrame f1=new JFrame();
            int a=JOptionPane.showConfirmDialog(f1,"Are you sure you want to create \n a record for a member with above details?");  
            //confirmation of adiing details in to database
            if(a==JOptionPane.YES_OPTION){
                //passing & taking values to insertMember  method in DbQuery class to insert & retrieve data in to member table of library database
                try {
                    DbQuery.insertMember(Name.getText(),NIC.getText(),Contact.getText());
                }
                catch (SQLException ex) {
                }
            }
        }
    }//GEN-LAST:event_AddActionPerformed

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        // close Add members window
        this.setVisible(false);
        // open Home window
        new Home().setVisible(true);
    }//GEN-LAST:event_HomeActionPerformed

    private void ContactKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ContactKeyTyped
        //contcat text field data validation
        //getting character type input by user
        char c=evt.getKeyChar();
        //getting length of entered text
        int n=Contact.getText().length();
        //increment the value of n if user typed anything other than back space or delete key for to run the programme properly in the way it needs to run
        if((c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)){   
        }
        else{
            n++;            
        }
        //checking if maximum allowed number of characters exceed(10)
        if(n<=10){                
                //cheking is user typing other than numbers
                if((Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE))){
                    //setting text color black if only there are 10 digits and red otherwise
                    if(n==10){
                        Contact.setForeground(Color.BLACK);
                    }
                    else{
                        Contact.setForeground(Color.RED);
                    }
                }
                else{
                   //prevent user typing other than numbers
                   evt.consume();
                   //showing notofocation if user trying to enter other than numbers
                   String message="Only numbers allowed" ;
                   JFrame f=new JFrame();
                   JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);            
                }
        }
        else{ 
           //prevent user from typing in the text field after reaching number of maximum characters allowed
           evt.consume();
           //showing warning if user trying to type more than limit of allowed number of characters 
           String message="Maximum number of characters allowed(10) have reach" ;
           JFrame f=new JFrame();
           JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
        }       
    }//GEN-LAST:event_ContactKeyTyped

    private void ContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContactActionPerformed

    }//GEN-LAST:event_ContactActionPerformed

    private void NICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NICActionPerformed

    }//GEN-LAST:event_NICActionPerformed

    private void NICKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NICKeyTyped
        //NIC text field data validation
        //getting character type input by user
        char c=evt.getKeyChar();
        //getting length of entered text
        int n=NIC.getText().length();
        //increment the value of n if user typed anything other than back space or delete key for to run the programme properly as in the way it needs to run
        if((c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)){   
        }else{
            n++;            
        }
        //checking if maximum allowed number of characters exceed(12)
        if(n<=12){
            //checking validation up to 9 characters
            if(n<=9){
                //cheking is user typing other than numbers
                if(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)){
                }
                else{
                    //prevent user typing other than numbers
                    evt.consume();
                    //showing warnning if user trying to enter other than numbers
                    String message="Only numbers allowed \nYou can enter either 10 digits NIC with 9 numbers and 10th digit as V "
                            + " \n Or you can enter 12 digits NIC with just only numbers " ;
                    JFrame f=new JFrame();
                    JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);                   
                }               
            }
            //checking validation of 10th character
            else if(n==10){
                //cheking is user entering other than V or a number as 10th character
                if(Character.isDigit(c)||(c==KeyEvent.VK_V)||(c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)){
                }
                else{
                    //prevent user typing other than numbers or V as 10th character
                    evt.consume();
                    //showing warnning if user trying to enter other than V or a number as 10th character
                    String message="Only numbers or V allowed \nYou can enter either 10 digits NIC with 9 numbers and 10th digit as V "
                            + " \n Or you can enter 12 digits NIC with just only numbers " ;
                    JFrame f=new JFrame();
                    JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);              
                }                
            }
            //cheking validation after 10th character
            else {                
                //checking the 10th character(is it V or a number)
                if(NIC.getText().charAt(9)=='V'){
                    //prevent user typing more than 10 digits if they enter V as 10th character
                    evt.consume();
                    //showing warnning if user typing more than 10 digits if they enter V as 10th character
                    String message="You can enter either 10 digits NIC with 9 numbers and 10th digit as V "
                            + " \n Or you can enter 12 digits NIC with just only numbers " ;
                    JFrame f=new JFrame();
                    JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);  
                    //increament the value of n by 1 for to run the programme properly as in the way it needs to run
                    n++;
                }
                //if 10th character is not V and if it is a number
                else{
                    //cheking is user typing other than numbers
                    if(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)){
                    }
                    else{
                        //prevent user typing other than numbers
                        evt.consume();
                        //showing notification if they trying to enter other than numbers
                    String message="Only numbers allowed \nYou can enter either 10 digits NIC with 9 numbers and 10th digit as V "
                            + " \n Or you can enter 12 digits NIC with just only numbers " ;
                        JFrame f=new JFrame();
                        JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);                        
                    }
                }
            }  
            //setting text color black if there are 10 or 12 digits and red otherwise
            if(n==10||n==12){
                NIC.setForeground(Color.BLACK);
            }
            else{
                NIC.setForeground(Color.RED);
            }           
        }
        else{ 
            //prevent user from typing in the text field after reaching number of maximum characters allowed(12)
            evt.consume();
            //showing warning if user trying to type more than limit of allowed number of characters(12)
            String message="You can enter either 10 digits NIC with 9 numbers and 10th digit as V "
                    + " \n Or you can enter 12 digits NIC with just only numbers " ;
            JFrame f=new JFrame();
            JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_NICKeyTyped

    private void NameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NameKeyTyped
        //Name text field data validation
        //getting character type input by user            
        char c=evt.getKeyChar();
        //getting length of entered text
        int n=Name.getText().length();
        //checking if maximum allowed number of characters exceed(50)
        if(n<=49){
            //cheking is user typing other than simple letters
            if((Character.isLowerCase(c)||(c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)||(c==KeyEvent.VK_SPACE))){
            }
            else{
               //prevent user typing other than simple letters
               evt.consume();
               //showing a warnninng if user trying to type other than simple letter
               String message="Only simple letters allowed" ;
               JFrame f=new JFrame();
               JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);            
            }
        }
        else{  
            //prevent user from typing in the text field after reaching number of maximum characters allowed(50)
            evt.consume();
            //showing warning if user trying to type more than limit of allowed number of characters(50)
            String message="Maximum number of characters allowed(50) have reached" ;
            JFrame f=new JFrame();
            JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_NameKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMembers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AddMembers().setVisible(true);
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    public static javax.swing.JTextField Contact;
    private javax.swing.JButton Home;
    public static javax.swing.JTextField NIC;
    public static javax.swing.JTextField Name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
