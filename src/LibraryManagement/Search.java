/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LibraryManagement;


import java.awt.Color;
import javax.swing.*; 
import java.awt.event.*;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;


/**
 *
 * @author U S E R
 */
public class Search extends javax.swing.JFrame {

    /**
     * Creates new form Search
     */
    
    //Group all buttons in to one group
    public Search() {
        initComponents();
        @SuppressWarnings("LocalVariableHidesMemberVariable")
        ButtonGroup Search = new ButtonGroup();
        Search.add(BookName);
        Search.add(Author);
        Search.add(PubYear);
        Search.add(SubDelay);    
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        SName = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Home = new javax.swing.JButton();
        BookName = new javax.swing.JRadioButton();
        Author = new javax.swing.JRadioButton();
        PubYear = new javax.swing.JRadioButton();
        SubDelay = new javax.swing.JRadioButton();
        Delete = new javax.swing.JButton();
        MinYear = new javax.swing.JTextField();
        MaxYear = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Search Books");

        SName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SNameActionPerformed(evt);
            }
        });
        SName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SNameKeyTyped(evt);
            }
        });

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jLabel6.setText("From");

        jLabel7.setText("To");

        Home.setText("Home");
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });

        BookName.setText("Search by Book Name");
        BookName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookNameActionPerformed(evt);
            }
        });

        Author.setText("Search by Author Name");
        Author.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorActionPerformed(evt);
            }
        });

        PubYear.setText("Search by Published Year");
        PubYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PubYearActionPerformed(evt);
            }
        });

        SubDelay.setText("Delayed Submission to Date");
        SubDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubDelayActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        MinYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MinYearKeyTyped(evt);
            }
        });

        MaxYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MaxYearKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(BookName)
                                .addGap(54, 54, 54)
                                .addComponent(Author)
                                .addGap(71, 71, 71)
                                .addComponent(PubYear)
                                .addGap(74, 74, 74)
                                .addComponent(SubDelay))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(SName, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(jLabel6)
                                .addGap(12, 12, 12)
                                .addComponent(MinYear, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(549, 549, 549)
                                .addComponent(jLabel7)
                                .addGap(27, 27, 27)
                                .addComponent(MaxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(188, 188, 188)
                                .addComponent(Search))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 877, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(914, 914, 914)
                                .addComponent(Delete))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(456, 456, 456)
                        .addComponent(jLabel1)))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BookName)
                        .addComponent(Author))
                    .addComponent(PubYear)
                    .addComponent(SubDelay))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel6))
                    .addComponent(MinYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(MaxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Search))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(Delete)
                .addGap(59, 59, 59)
                .addComponent(Home)
                .addGap(140, 140, 140))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        // close Searchh window
        this.setVisible(false);
        //open Home window
        new Home().setVisible(true);
    }//GEN-LAST:event_HomeActionPerformed

    private void AuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorActionPerformed

    }//GEN-LAST:event_AuthorActionPerformed

    private void SubDelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubDelayActionPerformed

    }//GEN-LAST:event_SubDelayActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        //Search button performence
        
        //if Search by Book Name select
        if(BookName.isSelected()){
            //check if text field empty
            if(SName.getText().isEmpty()){
                //showing warnning text field is empty
                String message="Error \n Text field is empty" ;
                JFrame f=new JFrame();
                JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);                
            }
            else{
                //passing data into SBookName method in DbQuery class to run the sql query and retreive data
                try {
                    DbQuery.SBookName(SName.getText());           
                }
                catch (SQLException ex) {
                }
            }
        }
        //if Search by Author select
        else if(Author.isSelected()){
            //check if text field empty
            if(SName.getText().isEmpty()){
                //showing warnning if text field is empty
                String message="Error \n Text field is empty" ;
                JFrame f=new JFrame();
                JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);                
            }
            else{ 
                //passing data into SAuthor method in DbQuery class to run the sql query and retreive data
                try {
                    DbQuery.SAuthor(SName.getText());           
                }
                catch (SQLException ex) {
                }
            }
        }
        //if search by Published Year select
        else if(PubYear.isSelected()){
            //get number of character of two text fields
            int n1=MinYear.getText().length();
            int n2=MaxYear.getText().length();
            //prevent user from leaving both text field empty
            if(n1!=0 || n2!=0 ){
                //check validity of entered data in two text fields
                if((n1==4||n1==0) && (n2==4||n2==0)){
                    //passing data in to SPubYear method in DbQuery class to run sql query and retrieve data
                    try {
                        DbQuery.SPubYear(MinYear.getText(),MaxYear.getText());                        
                    } 
                    catch (SQLException ex) {
                    }
                }
                else{
                    //showing warnning if user entered invalid value
                    String message="Error \n Invalid value" ;
                    JFrame f=new JFrame();
                    JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
                }
            }
            else{
                //showing warnning if user leavin both text field empty
                String message="Error \n Both fields are empty, fill at least one filed with a valid year" ;
                JFrame f=new JFrame();
                JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);               
            }
        }
        //if Search by Dealayed submittion to Date select
        else if(SubDelay.isSelected()){
            SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
            //taking current date as SSubDelay
            Date SSubDelay = new Date();
            //converting SSubDelay in to string
            String strSSubDelay=dateFormat.format(SSubDelay);
            //passig data in to SSubDelay method in DvQuery class to run sql query and retrieve data
            try {
                DbQuery.SSubDelay(strSSubDelay);            
            } 
            catch (SQLException ex) {
            }                   
        }
        //if non of any button select
        else{
            //showing warnning if non of any button selected
            String message=" Error \n Please choose a category you need to search by selecting a button \n And then type waht you need to search " ;
            JFrame f=new JFrame();
            JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);   
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void BookNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookNameActionPerformed

    }//GEN-LAST:event_BookNameActionPerformed

    private void PubYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PubYearActionPerformed

    }//GEN-LAST:event_PubYearActionPerformed

    private void SNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SNameActionPerformed

    }//GEN-LAST:event_SNameActionPerformed

    private void SNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SNameKeyTyped
        //SName text field data validation
        //getting length of entered text
        int n=SName.getText().length();
        //getting character type input by user
        char c=evt.getKeyChar();
        //activation of BookName text field
        if(BookName.isSelected()){
            //checking if maximum allowed number of characters exceed(50)
            if(n<=49){
                //cheking is user typing other than simple letters or numbers
                if((Character.isLowerCase(c)||Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)||(c==KeyEvent.VK_SPACE))){
                }
                else{
                   //prevent user typing other than simple letters or numbers
                   evt.consume();
                   //showing warnning if user entered other than simple letters or numbers
                   String message="Only simple letters and numbers allowed" ;
                   JFrame f=new JFrame();
                   JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);            
                }   
            }
            else{  
                //prevent user from typing in the text field after reaching number of maximum characters allowed(50)
                evt.consume();
                //showing warnning if user trying to type more than limit of allowed number of characters
                String message="Maximum number of characters allowed(50) have reach" ;
                JFrame f=new JFrame();
                JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
            } 
        }
        //activation of Author text field
        else if(Author.isSelected()){
            //checking if maximum number of characters allowed exceed(50)
            if(n<=49){
                //cheking is user typing other than simple letters
                if((Character.isLowerCase(c)||(c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)||(c==KeyEvent.VK_SPACE))){
               }
                else{
                    //prevent user typing other than simple letters
                    evt.consume();
                    //showing warnning if user entered other than simple letters
                    String message="Only simple letters allowed" ;
                    JFrame f=new JFrame();
                    JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);            
                }
            }
            else{  
                //prevent user from typing in the text field after reaching number of maximum characters allowed(50)
                evt.consume();
                //showing warnning if user trying to type more than limit of allowed number of characters
                String message="Maximum number of characters allowed(50) have reach" ;
                JFrame f=new JFrame();
                JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
            }            
        }  
        //deactivate if non of both BookName or Author button selected
        else{
            // prevent from user typing in the text field
            evt.consume();  
            //showing warnnig if non of both BookName or Author button selected
            String message="Plese select Search by Book Name or Search by Author Name button to type here" ;
            JFrame f=new JFrame();
            JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
        }    
    }//GEN-LAST:event_SNameKeyTyped
    //Storing ID of selected row in global variable for external use
    String ID;   
    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        //getting ID number of selected row
        if(BookName.isSelected()||Author.isSelected()||PubYear.isSelected()){
            int row=Table.getSelectedRow();
            String ClickedID=(Table.getModel().getValueAt(row,0).toString());
            ID=ClickedID;
        }
    }//GEN-LAST:event_TableMouseClicked
     
    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        //check is delete function available
        if(BookName.isSelected()||Author.isSelected()||PubYear.isSelected()){
            //check if is a row selected and value of ID is not null
            if(ID!=null){
                try {
                    JFrame f1=new JFrame();
                    int a=JOptionPane.showConfirmDialog(f1,"Are you sure you want to Delete this record?");                    
                    //confirmation of delete record from database
                    if(a==JOptionPane.YES_OPTION){                    
                        DbQuery.Delete(ID);
                        //set value of ID null to prevent use same row ID value next time if new row isn't select
                        ID=null; 
                    }
                } catch (SQLException ex) {
                }                
            }else{
                //showing warnning if a row is not selected
                String message="Error \n Please select the row need to delete" ;
                JFrame f=new JFrame();
                JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);            
            }
        }   
        else{
            //shwing a warnning if search function not available
            String message="Please select one of category from \n Search by Book Name or Search by Author Name or Search by Published Year \n And then select the row need to delete" ;
            JFrame f=new JFrame();
            JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void MinYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MinYearKeyTyped
        //MinYear text field data validation
        //getting character type input by user
        char c=evt.getKeyChar();
        //getting length of entered text
        int n=MinYear.getText().length();
        //activation of text field
        if(PubYear.isSelected()){
            //increment the value of n if user typed anything other than back space or delete key for to run the programme properly in the way it needs to run
            if((c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)){   
            }else{
                n++;            
            }
            //checking if maximum allowed number of characters exceed(4)
            if(n<=4){                
                //cheking is user typing other than numbers
                if((Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE))){
                    //setting text color black if only there are 4 digits and red otherwise
                    if(n==4){
                        MinYear.setForeground(Color.BLACK);
                    }
                    else{
                        MinYear.setForeground(Color.RED);
                    }
                }
                else{
                   //prevent user from typing other than numbers
                   evt.consume();
                   //showing warnning if usertrying to type other than numbers
                   String message="Only numbers allowed" ;
                   JFrame f=new JFrame();
                   JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);            
                }
            }
            else{ 
               //prevent user from typing in the text field after reaching number of maximum characters allowed
               evt.consume();
               //showing warnning if user trying to enter more then number of characters aloowed
               String message="Maximum number of characters allowed(4) have reach" ;
               JFrame f=new JFrame();
               JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
            }
        }
        else{
            // prevent from user typing in the text field if PubYear is not selected
            evt.consume();
            //showing warnning if user typing in the text field without selecting PubYear
            String message="Plese select Search by Published Year button " ;
            JFrame f=new JFrame();
            JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_MinYearKeyTyped

    private void MaxYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MaxYearKeyTyped
        //MaxYear text field data validation
        //getting character type input by user
        char c=evt.getKeyChar();
        //getting length of entered text
        int n=MaxYear.getText().length();
        //activation of text field
        if(PubYear.isSelected()){
            //increment the value of n if user typed anything other than back space or delete key for to run the programme properly in the way it needs to run
            if((c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE)){   
            }else{
                n++;            
            }
            //checking if maximum allowed number of characters exceed(4)
            if(n<=4){                
                //cheking is user typing other than numbers
                if((Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||(c==KeyEvent.VK_DELETE))){
                    //setting text color black if only there are 4 digits and red otherwise
                    if(n==4){
                        MaxYear.setForeground(Color.BLACK);
                    }
                    else{
                        MaxYear.setForeground(Color.RED);
                    }
                }
                else{
                   //prevent user typing other than numbers
                   evt.consume();
                   //showing warnning if usertrying to type other than numbers
                   String message="Only numbers allowed" ;
                   JFrame f=new JFrame();
                   JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);            
                }
            }
            else{ 
               //prevent user from typing in the text field after reaching number of maximum characters allowed
               evt.consume();
                //showing warnning if user trying to enter more then number of characters aloowed
               String message="Maximum number of characters allowed(4) have reach" ;
               JFrame f=new JFrame();
               JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
            }
        }
        else{
            // prevent from user typing in the text field if PubYear is not selected
            evt.consume();       
            //showing warnning if user typing in the text field without selecting PubYear
            String message="Plese select Search by Published Year button " ;
            JFrame f=new JFrame();
            JOptionPane.showMessageDialog(f,message,"Alert",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_MaxYearKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Search().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Author;
    private javax.swing.JRadioButton BookName;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Home;
    private javax.swing.JTextField MaxYear;
    private javax.swing.JTextField MinYear;
    private javax.swing.JRadioButton PubYear;
    private javax.swing.JTextField SName;
    private javax.swing.JButton Search;
    private javax.swing.JRadioButton SubDelay;
    public static javax.swing.JTable Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}